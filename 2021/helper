#!/usr/bin/env -S fennel --correlate

(local fennel (require :fennel))

(local lua-version (_VERSION:match "Lua (.*)"))
(local path-separator (package.config:sub 3 3))
(set package.path (table.concat [(.. ".luarocks/share/lua/" lua-version "/?.lua") package.path] path-separator))
(set package.cpath (table.concat [(.. ".luarocks/lib/lua/" lua-version "/?.so") package.cpath] path-separator))
(fn add-fnl-path [path]
  (set fennel.path (table.concat [path fennel.path] path-separator)))
(fn add-fnl-macro-path [path]
  (set fennel.macro-path (table.concat [path fennel.macro-path] path-separator)))
(add-fnl-path "seeds/?.fnl")
(add-fnl-path "src/?.fnl")

(fn install-deps []
  (let [deps (require :deps)]
    (each [dep config (pairs deps)]
      (let [ok? (pcall #(require dep))]
        (when (not ok?)
          (os.execute (table.concat
                        ["luarocks" "--tree" ".luarocks" "--lua-version" lua-version :install (table.unpack config)] " ")))))))

(fn make-dirs [dirs]
  (let [lfs (require :lfs)]
    (each [_ dir (ipairs dirs)]
      (lfs.mkdir dir))))

(fn get-input [day-num dir]
  (let [lfs (require :lfs)
        file-name (.. dir "/" "input.txt")]
    (when (= nil (lfs.attributes file-name :mode))
      (with-open [session-file (io.open ".aoc-session")
                  input-file (io.open file-name :w)]
        (let [curl (require :lcurl)
              opts {:url (string.format "https://adventofcode.com/2021/day/%s/input" day-num)
                    :httpheader [(string.format "Cookie: session=%s" (session-file:read :l))]
                    :writefunction input-file}]
          (with-open [request (curl.easy opts)]
            (request:perform)))))))

(local src-files
  {"solution.fnl" "(fn parse-input [input]
  (icollect [entry (input:gmatch \"[^\\n]+\")]
    entry))

(fn solve-1 [input])

(fn solve-2 [input])

(fn solve [input solver]
  (solver (parse-input input)))

{:solve-1 (fn [input] (solve input solve-1))
 :solve-2 (fn [input] (solve input solve-2))}
"})

(local test-files
  {"test.fnl" "(import-macros {: test-fn} :tester)
(local lu (require :luaunit))

(local {: solve-1 : solve-2} (require :solution))

(local sample \"\")
(local answer-1 nil)
(local answer-2 nil)

(test-fn
  part-1
  (lu.assertEquals (solve-1 sample) answer-1))

(test-fn
  part-2
  (lu.assertEquals (solve-2 sample) answer-2))

{: part-1
 : part-2}
"})

(fn make-files [dir files]
  (each [name contents (pairs files)]
    (with-open [file (io.open (.. dir "/" name) :w)]
      (file:write contents))))

(fn make-day-fnl-path [day-num]
  (string.format "src/%s/?.fnl" day-num))

(fn add-project-fnl-paths [day-num]
  (add-fnl-path (make-day-fnl-path day-num))
  (add-fnl-path "src/?.fnl"))

(local commands
  {:setup (fn []
            (install-deps))
   :day (fn [[day-num]]
          (let [src-dir (.. "src/" day-num)
                test-dir (.. "test/" day-num)
                dirs [src-dir test-dir]]
            (make-dirs dirs)
            (get-input day-num src-dir)
            (make-files src-dir src-files)
            (make-files test-dir test-files)))
   :test (fn [[day-num]]
           (add-project-fnl-paths day-num)
           (add-fnl-macro-path "seeds/?/init-macros.fnl")
           (fennel.dofile "seeds/tester/runner" nil (.. "test/" day-num)))
   :run (fn [[day-num]]
          (add-project-fnl-paths day-num)
          (let [{: solve-1 : solve-2} (require :solution)
                input (with-open [input-file (io.open (string.format "src/%s/input.txt" day-num))]
                        (input-file:read :a))]
            (print 1 (solve-1 input))
            (print 2 (solve-2 input))))})

(let [[?command-name & args] arg
      command-name (or ?command-name "")
      command (. commands command-name)]
  (if command
    (command args)
    (print (.. "Unknown command: " command-name))))
;; vim:ft=fennel
